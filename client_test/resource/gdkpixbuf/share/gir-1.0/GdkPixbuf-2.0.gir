<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GModule" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <package name="gdk-pixbuf-2.0"/>
  <c:include name="gdk-pixbuf/gdk-pixbuf.h"/>
  <namespace name="GdkPixbuf"
             version="2.0"
             shared-library="libgdk_pixbuf-2.0.0.dylib"
             c:identifier-prefixes="Gdk"
             c:symbol-prefixes="gdk">
    <enumeration name="Colorspace"
                 glib:type-name="GdkColorspace"
                 glib:get-type="gdk_colorspace_get_type"
                 c:type="GdkColorspace">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-core.h"
           line="65">This enumeration defines the color spaces that are supported by
the gdk-pixbuf library.  Currently only RGB is supported.</doc>
      <member name="rgb"
              value="0"
              c:identifier="GDK_COLORSPACE_RGB"
              glib:nick="rgb">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-core.h"
             line="67">Indicates a red/green/blue additive color space.</doc>
      </member>
    </enumeration>
    <function-macro name="IS_PIXBUF"
                    c:identifier="GDK_IS_PIXBUF"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="94"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PIXBUF_ANIMATION"
                    c:identifier="GDK_IS_PIXBUF_ANIMATION"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                       line="57"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PIXBUF_ANIMATION_CLASS"
                    c:identifier="GDK_IS_PIXBUF_ANIMATION_CLASS"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                       line="149"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PIXBUF_ANIMATION_ITER"
                    c:identifier="GDK_IS_PIXBUF_ANIMATION_ITER"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                       line="61"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PIXBUF_ANIMATION_ITER_CLASS"
                    c:identifier="GDK_IS_PIXBUF_ANIMATION_ITER_CLASS"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                       line="198"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PIXBUF_LOADER"
                    c:identifier="GDK_IS_PIXBUF_LOADER"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PIXBUF_LOADER_CLASS"
                    c:identifier="GDK_IS_PIXBUF_LOADER_CLASS"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h" line="43"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PIXBUF_SIMPLE_ANIM"
                    c:identifier="GDK_IS_PIXBUF_SIMPLE_ANIM"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                       line="43"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PIXBUF_SIMPLE_ANIM_CLASS"
                    c:identifier="GDK_IS_PIXBUF_SIMPLE_ANIM_CLASS"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                       line="46"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="InterpType"
                 glib:type-name="GdkInterpType"
                 glib:get-type="gdk_interp_type_get_type"
                 c:type="GdkInterpType">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
           line="39">This enumeration describes the different interpolation modes that
can be used with the scaling functions. @GDK_INTERP_NEAREST is
the fastest scaling method, but has horrible quality when
scaling down. @GDK_INTERP_BILINEAR is the best choice if you
aren't sure what to choose, it has a good speed/quality balance.

**Note**: Cubic filtering is missing from the list; hyperbolic
interpolation is just as fast and results in higher quality.</doc>
      <member name="nearest"
              value="0"
              c:identifier="GDK_INTERP_NEAREST"
              glib:nick="nearest">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
             line="41">Nearest neighbor sampling; this is the fastest
 and lowest quality mode. Quality is normally unacceptable when scaling
 down, but may be OK when scaling up.</doc>
      </member>
      <member name="tiles"
              value="1"
              c:identifier="GDK_INTERP_TILES"
              glib:nick="tiles">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
             line="44">This is an accurate simulation of the PostScript
 image operator without any interpolation enabled.  Each pixel is
 rendered as a tiny parallelogram of solid color, the edges of which
 are implemented with antialiasing.  It resembles nearest neighbor for
 enlargement, and bilinear for reduction.</doc>
      </member>
      <member name="bilinear"
              value="2"
              c:identifier="GDK_INTERP_BILINEAR"
              glib:nick="bilinear">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
             line="49">Best quality/speed balance; use this mode by
 default. Bilinear interpolation.  For enlargement, it is
 equivalent to point-sampling the ideal bilinear-interpolated image.
 For reduction, it is equivalent to laying down small tiles and
 integrating over the coverage area.</doc>
      </member>
      <member name="hyper"
              value="3"
              c:identifier="GDK_INTERP_HYPER"
              glib:nick="hyper">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
             line="54">This is the slowest and highest quality
 reconstruction function. It is derived from the hyperbolic filters in
 Wolberg's "Digital Image Warping", and is formally defined as the
 hyperbolic-filter sampling the ideal hyperbolic-filter interpolated
 image (the filter is designed to be idempotent for 1:1 pixel mapping).
 **Deprecated**: this interpolation filter is deprecated, as in reality
 it has a lower quality than the @GDK_INTERP_BILINEAR filter
 (Since: 2.38)</doc>
      </member>
    </enumeration>
    <function-macro name="PIXBUF" c:identifier="GDK_PIXBUF" introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="93"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_ANIMATION"
                    c:identifier="GDK_PIXBUF_ANIMATION"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                       line="56"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_ANIMATION_CLASS"
                    c:identifier="GDK_PIXBUF_ANIMATION_CLASS"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                       line="148"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_ANIMATION_GET_CLASS"
                    c:identifier="GDK_PIXBUF_ANIMATION_GET_CLASS"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                       line="150"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_ANIMATION_ITER"
                    c:identifier="GDK_PIXBUF_ANIMATION_ITER"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                       line="60"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_ANIMATION_ITER_CLASS"
                    c:identifier="GDK_PIXBUF_ANIMATION_ITER_CLASS"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                       line="197"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_ANIMATION_ITER_GET_CLASS"
                    c:identifier="GDK_PIXBUF_ANIMATION_ITER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                       line="199"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_CHECK_VERSION"
                    c:identifier="GDK_PIXBUF_CHECK_VERSION"
                    version="2.36"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
           line="32">Macro to test the version of GdkPixbuf being compiled against.</doc>
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h" line="45"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
               line="34">major version (e.g. 2 for version 2.34.0)</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
               line="35">minor version (e.g. 34 for version 2.34.0)</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
               line="36">micro version (e.g. 0 for version 2.34.0)</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_0_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_0_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="343"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_10_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_10_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="433"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_12_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_12_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="451"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_14_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_14_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="469"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_16_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_16_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="487"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_18_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_18_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="505"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_20_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_20_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="523"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_22_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_22_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="541"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_24_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_24_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="559"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_26_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_26_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="577"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_28_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_28_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="595"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_2_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_2_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="361"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_30_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_30_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="613"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_32_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_32_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="631"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_34_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_34_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="649"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_36_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_36_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="667"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_38_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_38_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="685"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_40_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_40_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="703"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_4_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_4_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="379"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_6_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_6_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="397"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_DEPRECATED_IN_2_8_FOR"
                    c:identifier="GDK_PIXBUF_DEPRECATED_IN_2_8_FOR"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-macros.h"
                       line="415"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="PIXBUF_FEATURES_H"
              value="1"
              c:type="GDK_PIXBUF_FEATURES_H">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-features.h"
                       line="6"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="PIXBUF_LOADER"
                    c:identifier="GDK_PIXBUF_LOADER"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_LOADER_CLASS"
                    c:identifier="GDK_PIXBUF_LOADER_CLASS"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h" line="41"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_LOADER_GET_CLASS"
                    c:identifier="GDK_PIXBUF_LOADER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="PIXBUF_MAJOR" value="2" c:type="GDK_PIXBUF_MAJOR">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-features.h"
           line="19">Major version of gdk-pixbuf library, that is the "0" in
"0.8.2" for example.</doc>
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-features.h"
                       line="45"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PIXBUF_MICRO" value="2" c:type="GDK_PIXBUF_MICRO">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-features.h"
           line="31">Micro version of gdk-pixbuf library, that is the "2" in
"0.8.2" for example.</doc>
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-features.h"
                       line="47"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PIXBUF_MINOR" value="42" c:type="GDK_PIXBUF_MINOR">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-features.h"
           line="25">Minor version of gdk-pixbuf library, that is the "8" in
"0.8.2" for example.</doc>
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-features.h"
                       line="46"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="PIXBUF_SIMPLE_ANIM"
                    c:identifier="GDK_PIXBUF_SIMPLE_ANIM"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                       line="42"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_SIMPLE_ANIM_CLASS"
                    c:identifier="GDK_PIXBUF_SIMPLE_ANIM_CLASS"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                       line="45"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PIXBUF_SIMPLE_ANIM_GET_CLASS"
                    c:identifier="GDK_PIXBUF_SIMPLE_ANIM_GET_CLASS"
                    introspectable="0">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                       line="47"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="PIXBUF_VERSION" value="2.42.2" c:type="GDK_PIXBUF_VERSION">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-features.h"
           line="37">Contains the full version of the gdk-pixbuf header as a string.
This is the version being compiled against; contrast with
#gdk_pixbuf_version.</doc>
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-features.h"
                       line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Pixbuf"
           c:symbol-prefix="pixbuf"
           c:type="GdkPixbuf"
           parent="GObject.Object"
           glib:type-name="GdkPixbuf"
           glib:get-type="gdk_pixbuf_get_type">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-core.h"
           line="81">This is the main structure in the gdk-pixbuf library.  It is
used to represent images.  It contains information about the
image's pixel data, its color space, bits per sample, width and
height, and the rowstride (the number of bytes between the start of
one row and the start of the next).</doc>
      <implements name="Gio.Icon"/>
      <implements name="Gio.LoadableIcon"/>
      <constructor name="new" c:identifier="gdk_pixbuf_new">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="563">Creates a new #GdkPixbuf structure and allocates a buffer for it.  The
buffer has an optimal rowstride.  Note that the buffer is not cleared;
you will have to fill it completely yourself.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="203"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="575">A newly-created #GdkPixbuf with a reference count of 1, or
%NULL if not enough memory could be allocated for the image buffer.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="colorspace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="565">Color space for image</doc>
            <type name="Colorspace" c:type="GdkColorspace"/>
          </parameter>
          <parameter name="has_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="566">Whether the image should have transparency information</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="bits_per_sample" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="567">Number of bits per color sample</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="568">Width of image in pixels, must be &gt; 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="569">Height of image in pixels, must be &gt; 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_bytes"
                   c:identifier="gdk_pixbuf_new_from_bytes"
                   version="2.32">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-data.c"
             line="87">Creates a new #GdkPixbuf out of in-memory readonly image data.
Currently only RGB images with 8 bits per sample are supported.
This is the #GBytes variant of gdk_pixbuf_new_from_data().</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="283"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-data.c"
               line="101">A newly-created #GdkPixbuf structure with a reference count of 1.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-data.c"
                 line="89">Image data in 8-bit/sample packed format inside a #GBytes</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="colorspace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-data.c"
                 line="90">Colorspace for the image data</doc>
            <type name="Colorspace" c:type="GdkColorspace"/>
          </parameter>
          <parameter name="has_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-data.c"
                 line="91">Whether the data has an opacity channel</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="bits_per_sample" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-data.c"
                 line="92">Number of bits per sample</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-data.c"
                 line="93">Width of the image in pixels, must be &gt; 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-data.c"
                 line="94">Height of the image in pixels, must be &gt; 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="rowstride" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-data.c"
                 line="95">Distance in bytes between row starts</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_data"
                   c:identifier="gdk_pixbuf_new_from_data">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-data.c"
             line="29">Creates a new #GdkPixbuf out of in-memory image data.  Currently only RGB
images with 8 bits per sample are supported.

Since you are providing a pre-allocated pixel buffer, you must also
specify a way to free that data.  This is done with a function of
type #GdkPixbufDestroyNotify.  When a pixbuf created with is
finalized, your destroy notification function will be called, and
it is its responsibility to free the pixel array.

See also gdk_pixbuf_new_from_bytes().</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="273"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-data.c"
               line="53">A newly-created #GdkPixbuf structure with a reference count of 1.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-data.c"
                 line="31">Image data in 8-bit/sample packed format</doc>
            <array zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="colorspace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-data.c"
                 line="32">Colorspace for the image data</doc>
            <type name="Colorspace" c:type="GdkColorspace"/>
          </parameter>
          <parameter name="has_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-data.c"
                 line="33">Whether the data has an opacity channel</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="bits_per_sample" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-data.c"
                 line="34">Number of bits per sample</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-data.c"
                 line="35">Width of the image in pixels, must be &gt; 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-data.c"
                 line="36">Height of the image in pixels, must be &gt; 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="rowstride" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-data.c"
                 line="37">Distance in bytes between row starts</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="destroy_fn"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-data.c"
                 line="38">Function used to free the data when the pixbuf's reference count
drops to zero, or %NULL if the data should not be freed</doc>
            <type name="PixbufDestroyNotify" c:type="GdkPixbufDestroyNotify"/>
          </parameter>
          <parameter name="destroy_fn_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-data.c"
                 line="40">Closure data to pass to the destroy notification function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="gdk_pixbuf_new_from_file"
                   throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="1091">Creates a new pixbuf by loading an image from a file.  The file format is
detected automatically. If %NULL is returned, then @error will be set.
Possible errors are in the #GDK_PIXBUF_ERROR and #G_FILE_ERROR domains.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="249"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="1101">A newly-created pixbuf with a reference count of 1, or %NULL if
any of several error conditions occurred:  the file could not be opened,
there was no loader for the file's format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1093">Name of file to load, in the GLib file
    name encoding</doc>
            <type name="filename" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file_at_scale"
                   c:identifier="gdk_pixbuf_new_from_file_at_scale"
                   version="2.6"
                   throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="1329">Creates a new pixbuf by loading an image from a file.  The file format is
detected automatically. If %NULL is returned, then @error will be set.
Possible errors are in the #GDK_PIXBUF_ERROR and #G_FILE_ERROR domains.
The image will be scaled to fit in the requested size, optionally preserving
the image's aspect ratio.

When preserving the aspect ratio, a @width of -1 will cause the image
to be scaled to the exact given height, and a @height of -1 will cause
the image to be scaled to the exact given width. When not preserving
aspect ratio, a @width or @height of -1 means to not scale the image
at all in that dimension. Negative values for @width and @height are
allowed since 2.8.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="257"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="1351">A newly-created pixbuf with a reference count of 1, or %NULL
if any of several error conditions occurred:  the file could not be opened,
there was no loader for the file's format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1331">Name of file to load, in the GLib file
    name encoding</doc>
            <type name="filename" c:type="const char*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1333">The width the image should have or -1 to not constrain the width</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1334">The height the image should have or -1 to not constrain the height</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="preserve_aspect_ratio" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1335">%TRUE to preserve the image's aspect ratio</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file_at_size"
                   c:identifier="gdk_pixbuf_new_from_file_at_size"
                   version="2.4"
                   throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="1206">Creates a new pixbuf by loading an image from a file.
The file format is detected automatically. If %NULL is returned, then
@error will be set. Possible errors are in the #GDK_PIXBUF_ERROR and
#G_FILE_ERROR domains.

The image will be scaled to fit in the requested size, preserving
the image's aspect ratio. Note that the returned pixbuf may be smaller
than @width x @height, if the aspect ratio requires it. To load
and image at the requested size, regardless of aspect ratio, use
gdk_pixbuf_new_from_file_at_scale().</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="252"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="1225">A newly-created pixbuf with a reference count of 1, or
%NULL if any of several error conditions occurred:  the file could not
be opened, there was no loader for the file's format, there was not
enough memory to allocate the image buffer, or the image file contained
invalid data.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1208">Name of file to load, in the GLib file
    name encoding</doc>
            <type name="filename" c:type="const char*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1210">The width the image should have or -1 to not constrain the width</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1211">The height the image should have or -1 to not constrain the height</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_inline"
                   c:identifier="gdk_pixbuf_new_from_inline"
                   deprecated="1"
                   deprecated-version="2.32"
                   throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixdata.c"
             line="931">Create a #GdkPixbuf from a flat representation that is suitable for
storing as inline data in a program. This is useful if you want to
ship a program with images, but don't want to depend on any
external files.

gdk-pixbuf ships with a program called [gdk-pixbuf-csource][gdk-pixbuf-csource],
which allows for conversion of #GdkPixbufs into such a inline representation.
In almost all cases, you should pass the `--raw` option to
`gdk-pixbuf-csource`. A sample invocation would be:

|[
 gdk-pixbuf-csource --raw --name=myimage_inline myimage.png
]|

For the typical case where the inline pixbuf is read-only static data,
you don't need to copy the pixel data unless you intend to write to
it, so you can pass %FALSE for @copy_pixels.  (If you pass `--rle` to
`gdk-pixbuf-csource`, a copy will be made even if @copy_pixels is %FALSE,
so using this option is generally a bad idea.)

If you create a pixbuf from const inline data compiled into your
program, it's probably safe to ignore errors and disable length checks,
since things will always succeed:
|[
pixbuf = gdk_pixbuf_new_from_inline (-1, myimage_inline, FALSE, NULL);
]|

For non-const inline data, you could get out of memory. For untrusted
inline data located at runtime, you could have corrupt inline data in
addition.</doc>
        <doc-deprecated xml:space="preserve">Use #GResource instead.</doc-deprecated>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="295"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixdata.c"
               line="972">A newly-created #GdkPixbuf structure with a reference,
  count of 1, or %NULL if an error occurred.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="data_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixdata.c"
                 line="933">Length in bytes of the @data argument or -1 to
   disable length checks</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixdata.c"
                 line="935">Byte data containing a
   serialized #GdkPixdata structure</doc>
            <array length="0" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="copy_pixels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixdata.c"
                 line="937">Whether to copy the pixel data, or use direct pointers
              @data for the resulting pixbuf</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_resource"
                   c:identifier="gdk_pixbuf_new_from_resource"
                   version="2.26"
                   throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="1781">Creates a new pixbuf by loading an image from an resource.

The file format is detected automatically. If %NULL is returned, then
@error will be set.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="263"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="1791">A newly-created pixbuf, or %NULL if any of several error
conditions occurred: the file could not be opened, the image format is
not supported, there was not enough memory to allocate the image buffer,
the stream contained invalid data, or the operation was cancelled.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="resource_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1783">the path of the resource file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_resource_at_scale"
                   c:identifier="gdk_pixbuf_new_from_resource_at_scale"
                   version="2.26"
                   throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="1818">Creates a new pixbuf by loading an image from an resource.

The file format is detected automatically. If %NULL is returned, then
@error will be set.

The image will be scaled to fit in the requested size, optionally
preserving the image's aspect ratio. When preserving the aspect ratio,
a @width of -1 will cause the image to be scaled to the exact given
height, and a @height of -1 will cause the image to be scaled to the
exact given width. When not preserving aspect ratio, a @width or
@height of -1 means to not scale the image at all in that dimension.

The stream is not closed.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="266"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="1840">A newly-created pixbuf, or %NULL if any of several error
conditions occurred: the file could not be opened, the image format is
not supported, there was not enough memory to allocate the image buffer,
the stream contained invalid data, or the operation was cancelled.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="resource_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1820">the path of the resource file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1821">The width the image should have or -1 to not constrain the width</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1822">The height the image should have or -1 to not constrain the height</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="preserve_aspect_ratio" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1823">%TRUE to preserve the image's aspect ratio</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stream"
                   c:identifier="gdk_pixbuf_new_from_stream"
                   version="2.14"
                   throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="1705">Creates a new pixbuf by loading an image from an input stream.

The file format is detected automatically. If %NULL is returned, then
@error will be set. The @cancellable can be used to abort the operation
from another thread. If the operation was cancelled, the error
%G_IO_ERROR_CANCELLED will be returned. Other possible errors are in
the #GDK_PIXBUF_ERROR and %G_IO_ERROR domains.

The stream is not closed.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="403"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="1721">A newly-created pixbuf, or %NULL if any of several error
conditions occurred: the file could not be opened, the image format is
not supported, there was not enough memory to allocate the image buffer,
the stream contained invalid data, or the operation was cancelled.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1707">a #GInputStream to load the pixbuf from</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1708">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stream_at_scale"
                   c:identifier="gdk_pixbuf_new_from_stream_at_scale"
                   version="2.14"
                   throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="1528">Creates a new pixbuf by loading an image from an input stream.

The file format is detected automatically. If %NULL is returned, then
@error will be set. The @cancellable can be used to abort the operation
from another thread. If the operation was cancelled, the error
%G_IO_ERROR_CANCELLED will be returned. Other possible errors are in
the #GDK_PIXBUF_ERROR and %G_IO_ERROR domains.

The image will be scaled to fit in the requested size, optionally
preserving the image's aspect ratio.

When preserving the aspect ratio, a @width of -1 will cause the image to be
scaled to the exact given height, and a @height of -1 will cause the image
to be scaled to the exact given width. If both @width and @height are
given, this function will behave as if the smaller of the two values
is passed as -1.

When not preserving aspect ratio, a @width or @height of -1 means to not
scale the image at all in that dimension.

The stream is not closed.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="418"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="1559">A newly-created pixbuf, or %NULL if any of several error
conditions occurred: the file could not be opened, the image format is
not supported, there was not enough memory to allocate the image buffer,
the stream contained invalid data, or the operation was cancelled.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1530">a #GInputStream to load the pixbuf from</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1531">The width the image should have or -1 to not constrain the width</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1532">The height the image should have or -1 to not constrain the height</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="preserve_aspect_ratio" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1533">%TRUE to preserve the image's aspect ratio</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1534">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stream_finish"
                   c:identifier="gdk_pixbuf_new_from_stream_finish"
                   version="2.24"
                   throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="1907">Finishes an asynchronous pixbuf creation operation started with
gdk_pixbuf_new_from_stream_async().</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="414"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="1915">a #GdkPixbuf or %NULL on error. Free the returned
object with g_object_unref().</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="async_result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1909">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_xpm_data"
                   c:identifier="gdk_pixbuf_new_from_xpm_data">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="2148">Creates a new pixbuf by parsing XPM data in memory.  This data is commonly
the result of including an XPM file into a program's C source.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="291"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="2155">A newly-created pixbuf with a reference count of 1.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2150">Pointer to inline XPM data.</doc>
            <array c:type="const char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <function name="calculate_rowstride"
                c:identifier="gdk_pixbuf_calculate_rowstride"
                version="2.36.8">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="523">Calculates the rowstride that an image created with those values would
have. This is useful for front-ends and backends that want to sanity
check image values without needing to create them.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="207"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="535">the rowstride for the given values, or -1 in case of error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="colorspace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="525">Color space for image</doc>
            <type name="Colorspace" c:type="GdkColorspace"/>
          </parameter>
          <parameter name="has_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="526">Whether the image should have transparency information</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="bits_per_sample" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="527">Number of bits per color sample</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="528">Width of image in pixels, must be &gt; 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="529">Height of image in pixels, must be &gt; 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_file_info"
                c:identifier="gdk_pixbuf_get_file_info"
                version="2.4">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="1958">Parses an image file far enough to determine its format and size.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="77"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="1968">A #GdkPixbufFormat describing
   the image format of the file or %NULL if the image format wasn't
   recognized. The return value is owned by #GdkPixbuf and should
   not be freed.</doc>
          <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1960">The name of the file to identify.</doc>
            <type name="filename" c:type="const gchar*"/>
          </parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1961">Return location for the width of the
    image, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1963">Return location for the height of the
    image, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_file_info_async"
                c:identifier="gdk_pixbuf_get_file_info_async"
                version="2.32">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="2060">Asynchronously parses an image file far enough to determine its
format and size.

For more details see gdk_pixbuf_get_file_info(), which is the synchronous
version of this function.

When the operation is finished, @callback will be called in the
main thread. You can then call gdk_pixbuf_get_file_info_finish() to
get the result of the operation.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2062">The name of the file to identify</doc>
            <type name="filename" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2063">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2064">a #GAsyncReadyCallback to call when the file info is available</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2065">the data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_file_info_finish"
                c:identifier="gdk_pixbuf_get_file_info_finish"
                version="2.32"
                throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="2103">Finishes an asynchronous pixbuf parsing operation started with
gdk_pixbuf_get_file_info_async().</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="2113">A #GdkPixbufFormat describing the image
   format of the file or %NULL if the image format wasn't
   recognized. The return value is owned by GdkPixbuf and should
   not be freed.</doc>
          <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
        </return-value>
        <parameters>
          <parameter name="async_result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2105">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2106">Return location for the width of the image, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2107">Return location for the height of the image, or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_formats"
                c:identifier="gdk_pixbuf_get_formats"
                version="2.2">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="3386">Obtains the available information about the image formats supported
by GdkPixbuf.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="52"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="3392">A list of
#GdkPixbufFormats describing the supported image formats. The list should
be freed when it is no longer needed, but the structures themselves are
owned by #GdkPixbuf and should not be freed.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="PixbufFormat"/>
          </type>
        </return-value>
      </function>
      <function name="init_modules"
                c:identifier="gdk_pixbuf_init_modules"
                version="2.40"
                throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="569">Initalizes the gdk-pixbuf loader modules referenced by the loaders.cache
file present inside that directory.

This is to be used by applications that want to ship certain loaders
in a different location from the system ones.

This is needed when the OS or runtime ships a minimal number of loaders
so as to reduce the potential attack surface of carefully crafted image
files, especially for uncommon file types. Applications that require
broader image file types coverage, such as image viewers, would be
expected to ship the gdk-pixbuf modules in a separate location, bundled
with the application in a separate directory from the OS or runtime-
provided modules.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="571">Path to directory where the loaders.cache is installed</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_from_stream_async"
                c:identifier="gdk_pixbuf_new_from_stream_async"
                version="2.24">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="1866">Creates a new pixbuf by asynchronously loading an image from an input stream.

For more details see gdk_pixbuf_new_from_stream(), which is the synchronous
version of this function.

When the operation is finished, @callback will be called in the main thread.
You can then call gdk_pixbuf_new_from_stream_finish() to get the result of the operation.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="408"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1868">a #GInputStream from which to load the pixbuf</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1869">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1870">a #GAsyncReadyCallback to call when the pixbuf is loaded</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1871">the data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_from_stream_at_scale_async"
                c:identifier="gdk_pixbuf_new_from_stream_at_scale_async"
                version="2.24">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="1643">Creates a new pixbuf by asynchronously loading an image from an input stream.

For more details see gdk_pixbuf_new_from_stream_at_scale(), which is the synchronous
version of this function.

When the operation is finished, @callback will be called in the main thread.
You can then call gdk_pixbuf_new_from_stream_finish() to get the result of the operation.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="426"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1645">a #GInputStream from which to load the pixbuf</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1646">the width the image should have or -1 to not constrain the width</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1647">the height the image should have or -1 to not constrain the height</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="preserve_aspect_ratio" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1648">%TRUE to preserve the image's aspect ratio</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1649">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1650">a #GAsyncReadyCallback to call when the pixbuf is loaded</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1651">the data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="save_to_stream_finish"
                c:identifier="gdk_pixbuf_save_to_stream_finish"
                version="2.24"
                throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="3163">Finishes an asynchronous pixbuf save operation started with
gdk_pixbuf_save_to_stream_async().</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="452"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="3171">%TRUE if the pixbuf was saved successfully, %FALSE if an error was set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="async_result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3165">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_alpha" c:identifier="gdk_pixbuf_add_alpha">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-util.c"
             line="42">Takes an existing pixbuf and adds an alpha channel to it.
If the existing pixbuf already had an alpha channel, the channel
values are copied from the original; otherwise, the alpha channel
is initialized to 255 (full opacity).

If @substitute_color is %TRUE, then the color specified by (@r, @g, @b) will be
assigned zero opacity. That is, if you pass (255, 255, 255) for the
substitute color, all white pixels will become fully transparent.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="476"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-util.c"
               line="60">A newly-created pixbuf with a reference count of 1.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="44">A #GdkPixbuf.</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="substitute_color" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="45">Whether to set a color to zero opacity.  If this
is %FALSE, then the (@r, @g, @b) arguments will be ignored.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="r" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="47">Red value to substitute.</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="g" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="48">Green value to substitute.</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="49">Blue value to substitute.</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
        </parameters>
      </method>
      <method name="apply_embedded_orientation"
              c:identifier="gdk_pixbuf_apply_embedded_orientation"
              version="2.12">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-util.c"
             line="272">Takes an existing pixbuf and checks for the presence of an
associated "orientation" option, which may be provided by the
jpeg loader (which reads the exif orientation tag) or the
tiff loader (which reads the tiff orientation tag, and
compensates it for the partial transforms performed by
libtiff). If an orientation option/tag is present, the
appropriate transform will be performed so that the pixbuf
is oriented correctly.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="496"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-util.c"
               line="285">A newly-created pixbuf, %NULL if
not enough memory could be allocated for it, or a reference to the
input pixbuf (with an increased reference count).</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="274">A #GdkPixbuf.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="composite" c:identifier="gdk_pixbuf_composite">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
             line="134">Creates a transformation of the source image @src by scaling by
@scale_x and @scale_y then translating by @offset_x and @offset_y.
This gives an image in the coordinates of the destination pixbuf.
The rectangle (@dest_x, @dest_y, @dest_width, @dest_height)
is then alpha blended onto the corresponding rectangle of the
original destination image.

When the destination rectangle contains parts not in the source
image, the data at the edges of the source image is replicated
to infinity.

![](composite.png)</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="136">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="137">the #GdkPixbuf into which to render the results</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="dest_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="138">the left coordinate for region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="139">the top coordinate for region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="140">the width of the region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="141">the height of the region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="offset_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="142">the offset in the X direction (currently rounded to an integer)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="offset_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="143">the offset in the Y direction (currently rounded to an integer)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="144">the scale factor in the X direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="145">the scale factor in the Y direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="interp_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="146">the interpolation type for the transformation.</doc>
            <type name="InterpType" c:type="GdkInterpType"/>
          </parameter>
          <parameter name="overall_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="147">overall alpha for source image (0..255)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="composite_color" c:identifier="gdk_pixbuf_composite_color">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
             line="200">Creates a transformation of the source image @src by scaling by
@scale_x and @scale_y then translating by @offset_x and @offset_y,
then alpha blends the rectangle (@dest_x ,@dest_y, @dest_width,
@dest_height) of the resulting image with a checkboard of the
colors @color1 and @color2 and renders it onto the destination
image.

If the source image has no alpha channel, and @overall_alpha is 255, a fast
path is used which omits the alpha blending and just performs the scaling.

See gdk_pixbuf_composite_color_simple() for a simpler variant of this
function suitable for many tasks.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
                         line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="202">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="203">the #GdkPixbuf into which to render the results</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="dest_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="204">the left coordinate for region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="205">the top coordinate for region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="206">the width of the region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="207">the height of the region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="offset_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="208">the offset in the X direction (currently rounded to an integer)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="offset_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="209">the offset in the Y direction (currently rounded to an integer)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="210">the scale factor in the X direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="211">the scale factor in the Y direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="interp_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="212">the interpolation type for the transformation.</doc>
            <type name="InterpType" c:type="GdkInterpType"/>
          </parameter>
          <parameter name="overall_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="213">overall alpha for source image (0..255)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="check_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="214">the X offset for the checkboard (origin of checkboard is at -@check_x, -@check_y)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="check_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="215">the Y offset for the checkboard</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="check_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="216">the size of checks in the checkboard (must be a power of two)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="color1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="217">the color of check at upper left</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="color2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="218">the color of the other check</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="composite_color_simple"
              c:identifier="gdk_pixbuf_composite_color_simple">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
             line="333">Creates a new #GdkPixbuf by scaling @src to @dest_width x
@dest_height and alpha blending the result with a checkboard of colors
@color1 and @color2.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
                         line="147"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
               line="348">the new #GdkPixbuf, or %NULL if not enough memory could be
allocated for it.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="335">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="336">the width of destination image</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="337">the height of destination image</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="interp_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="338">the interpolation type for the transformation.</doc>
            <type name="InterpType" c:type="GdkInterpType"/>
          </parameter>
          <parameter name="overall_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="339">overall alpha for source image (0..255)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="check_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="340">the size of checks in the checkboard (must be a power of two)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="color1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="341">the color of check at upper left</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="color2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="342">the color of the other check</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="gdk_pixbuf_copy">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="605">Creates a new #GdkPixbuf with a copy of the information in the specified
@pixbuf. Note that this does not copy the options set on the original #GdkPixbuf,
use gdk_pixbuf_copy_options() for this.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="215"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="613">A newly-created pixbuf with a reference count of 1, or %NULL if
not enough memory could be allocated.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="607">A pixbuf.</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy_area" c:identifier="gdk_pixbuf_copy_area">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-util.c"
             line="127">Copies a rectangular area from @src_pixbuf to @dest_pixbuf.  Conversion of
pixbuf formats is done automatically.

If the source rectangle overlaps the destination rectangle on the
same pixbuf, it will be overwritten during the copy operation.
Therefore, you can not use this function to scroll a pixbuf.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="481"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src_pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="129">Source pixbuf.</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="src_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="130">Source X coordinate within @src_pixbuf.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="src_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="131">Source Y coordinate within @src_pixbuf.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="132">Width of the area to copy.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="133">Height of the area to copy.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="134">Destination pixbuf.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="dest_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="135">X coordinate within @dest_pixbuf.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="136">Y coordinate within @dest_pixbuf.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy_options"
              c:identifier="gdk_pixbuf_copy_options"
              version="2.36">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="1267">Copy the key/value pair options attached to a #GdkPixbuf to another.
This is useful to keep original metadata after having manipulated
a file. However be careful to remove metadata which you've already
applied, such as the "orientation" option after rotating the image.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="512"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="1277">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="src_pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="1269">a #GdkPixbuf to copy options from</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="dest_pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="1270">the #GdkPixbuf to copy options to</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fill" c:identifier="gdk_pixbuf_fill">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="999">Clears a pixbuf to the given RGBA value, converting the RGBA value into
the pixbuf's pixel format. The alpha will be ignored if the pixbuf
doesn't have an alpha channel.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="303"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="1001">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="pixel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="1002">RGBA pixel to clear to
        (0xffffffff is opaque white, 0x00000000 transparent black)</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="flip" c:identifier="gdk_pixbuf_flip" version="2.6">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
             line="489">Flips a pixbuf horizontally or vertically and returns the
result in a new pixbuf.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
                         line="160"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
               line="497">the new #GdkPixbuf, or %NULL
if not enough memory could be allocated for it.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="491">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="horizontal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="492">%TRUE to flip horizontally, %FALSE to flip vertically</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bits_per_sample"
              c:identifier="gdk_pixbuf_get_bits_per_sample">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="755">Queries the number of bits per color sample in a pixbuf.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="177"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="761">Number of bits per color sample.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="757">A pixbuf.</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_byte_length"
              c:identifier="gdk_pixbuf_get_byte_length"
              version="2.26">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="964">Returns the length of the pixel data, in bytes.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="187"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="970">The length of the pixel data.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="966">A pixbuf</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_colorspace" c:identifier="gdk_pixbuf_get_colorspace">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="707">Queries the color space of a pixbuf.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="713">Color space.</doc>
          <type name="Colorspace" c:type="GdkColorspace"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="709">A pixbuf.</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_alpha" c:identifier="gdk_pixbuf_get_has_alpha">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="739">Queries whether a pixbuf has an alpha channel (opacity information).</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="175"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="745">%TRUE if it has an alpha channel, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="741">A pixbuf.</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height" c:identifier="gdk_pixbuf_get_height">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="931">Queries the height of a pixbuf.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="183"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="937">Height in pixels.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="933">A pixbuf.</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_channels" c:identifier="gdk_pixbuf_get_n_channels">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="723">Queries the number of channels of a pixbuf.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="173"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="729">Number of channels.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="725">A pixbuf.</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_option" c:identifier="gdk_pixbuf_get_option">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="1066">Looks up @key in the list of options that may have been attached to the
@pixbuf when it was loaded, or that may have been attached by another
function using gdk_pixbuf_set_option().

For instance, the ANI loader provides "Title" and "Artist" options.
The ICO, XBM, and XPM loaders provide "x_hot" and "y_hot" hot-spot
options for cursor definitions. The PNG loader provides the tEXt ancillary
chunk key/value pairs as options. Since 2.12, the TIFF and JPEG loaders
return an "orientation" option string that corresponds to the embedded
TIFF/Exif orientation tag (if present). Since 2.32, the TIFF loader sets
the "multipage" option string to "yes" when a multi-page TIFF is loaded.
Since 2.32 the JPEG and PNG loaders set "x-dpi" and "y-dpi" if the file
contains image density information in dots per inch.
Since 2.36.6, the JPEG loader sets the "comment" option with the comment
EXIF tag.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="504"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="1087">the value associated with @key. This is a nul-terminated
string that should not be freed or %NULL if @key was not found.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="1068">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="1069">a nul-terminated string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_options"
              c:identifier="gdk_pixbuf_get_options"
              version="2.32">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="1112">Returns a #GHashTable with a list of all the options that may have been
attached to the @pixbuf when it was loaded, or that may have been
attached by another function using gdk_pixbuf_set_option().

See gdk_pixbuf_get_option() for more details.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="510"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="1122">a #GHashTable of key/values</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="1114">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixels"
              c:identifier="gdk_pixbuf_get_pixels"
              shadowed-by="get_pixels_with_length">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="771">Queries a pointer to the pixel data of a pixbuf.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="179"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="777">A pointer to the pixbuf's pixel data.
Please see the section on [image data][image-data] for information
about how the pixel data is stored in memory.

This function will cause an implicit copy of the pixbuf data if the
pixbuf was created from read-only data.</doc>
          <array zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="773">A pixbuf.</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixels_with_length"
              c:identifier="gdk_pixbuf_get_pixels_with_length"
              shadows="get_pixels"
              version="2.26">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="816">Queries a pointer to the pixel data of a pixbuf.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="190"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="823">A pointer to the pixbuf's
pixel data.  Please see the section on [image data][image-data]
for information about how the pixel data is stored in memory.

This function will cause an implicit copy of the pixbuf data if the
pixbuf was created from read-only data.</doc>
          <array length="0" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="818">A pixbuf.</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="819">The length of the binary data.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_rowstride" c:identifier="gdk_pixbuf_get_rowstride">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="947">Queries the rowstride of a pixbuf, which is the number of bytes between
the start of a row and the start of the next row.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="185"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="954">Distance between row starts.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="949">A pixbuf.</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width" c:identifier="gdk_pixbuf_get_width">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="915">Queries the width of a pixbuf.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="181"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="921">Width in pixels.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="917">A pixbuf.</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new_subpixbuf" c:identifier="gdk_pixbuf_new_subpixbuf">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="646">Creates a new pixbuf which represents a sub-region of @src_pixbuf.
The new pixbuf shares its pixels with the original pixbuf, so
writing to one affects both.  The new pixbuf holds a reference to
@src_pixbuf, so @src_pixbuf will not be finalized until the new
pixbuf is finalized.

Note that if @src_pixbuf is read-only, this function will force it
to be mutable.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="219"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="663">a new pixbuf</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src_pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="648">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="src_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="649">X coord in @src_pixbuf</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="src_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="650">Y coord in @src_pixbuf</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="651">width of region in @src_pixbuf</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="652">height of region in @src_pixbuf</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_pixel_bytes"
              c:identifier="gdk_pixbuf_read_pixel_bytes"
              version="2.32">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="881">Provides a #GBytes buffer containing the raw pixel data; the data
must not be modified.  This function allows skipping the implicit
copy that must be made if gdk_pixbuf_get_pixels() is called on a
read-only pixbuf.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="196"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="890">A new reference to a read-only copy of
  the pixel data.  Note that for mutable pixbufs, this function will
  incur a one-time copy of the pixel data for conversion into the
  returned #GBytes.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="883">A pixbuf</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="read_pixels"
              c:identifier="gdk_pixbuf_read_pixels"
              version="2.32">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="847">Provides a read-only pointer to the raw pixel data; must not be
modified.  This function allows skipping the implicit copy that
must be made if gdk_pixbuf_get_pixels() is called on a read-only
pixbuf.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="194"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="856">a read-only pointer to the raw pixel data</doc>
          <type name="guint8" c:type="const guint8*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="849">A pixbuf</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref"
              c:identifier="gdk_pixbuf_ref"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.0">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="380">Adds a reference to a pixbuf.</doc>
        <doc-deprecated xml:space="preserve">Use g_object_ref().</doc-deprecated>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="163"/>
        <return-value>
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="386">The same as the @pixbuf argument.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="382">A pixbuf.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_option"
              c:identifier="gdk_pixbuf_remove_option"
              version="2.36">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="1148">Remove the key/value pair option attached to a #GdkPixbuf.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="507"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="1155">%TRUE if an option was removed, %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="1150">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="1151">a nul-terminated string representing the key to remove.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rotate_simple"
              c:identifier="gdk_pixbuf_rotate_simple"
              version="2.6">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
             line="382">Rotates a pixbuf by a multiple of 90 degrees, and returns the
result in a new pixbuf.

If @angle is 0, a copy of @src is returned, avoiding any rotation.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
                         line="157"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
               line="392">the new #GdkPixbuf, or %NULL
if not enough memory could be allocated for it.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="384">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="angle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="385">the angle to rotate by</doc>
            <type name="PixbufRotation" c:type="GdkPixbufRotation"/>
          </parameter>
        </parameters>
      </method>
      <method name="saturate_and_pixelate"
              c:identifier="gdk_pixbuf_saturate_and_pixelate">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-util.c"
             line="177">Modifies saturation and optionally pixelates @src, placing the result in
@dest. @src and @dest may be the same pixbuf with no ill effects.  If
@saturation is 1.0 then saturation is not changed. If it's less than 1.0,
saturation is reduced (the image turns toward grayscale); if greater than
1.0, saturation is increased (the image gets more vivid colors). If @pixelate
is %TRUE, then pixels are faded in a checkerboard pattern to create a
pixelated image. @src and @dest must have the same image format, size, and
rowstride.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="489"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="179">source image</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="180">place to write modified version of @src</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="saturation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="181">saturation factor</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="pixelate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-util.c"
                 line="182">whether to pixelate</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="gdk_pixbuf_save" introspectable="0">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="2414">Saves pixbuf to a file in format @type. By default, "jpeg", "png", "ico"
and "bmp" are possible file formats to save in, but more formats may be
installed. The list of all writable formats can be determined in the
following way:

|[
void add_if_writable (GdkPixbufFormat *data, GSList **list)
{
  if (gdk_pixbuf_format_is_writable (data))
    *list = g_slist_prepend (*list, data);
}

GSList *formats = gdk_pixbuf_get_formats ();
GSList *writable_formats = NULL;
g_slist_foreach (formats, add_if_writable, &amp;writable_formats);
g_slist_free (formats);
]|

If @error is set, %FALSE will be returned. Possible errors include
those in the #GDK_PIXBUF_ERROR domain and those in the #G_FILE_ERROR domain.

The variable argument list should be %NULL-terminated; if not empty,
it should contain pairs of strings that modify the save
parameters. For example:
|[
gdk_pixbuf_save (pixbuf, handle, "jpeg", &amp;error, "quality", "100", NULL);
]|

Currently only few parameters exist. JPEG images can be saved with a
"quality" parameter; its value should be in the range [0,100]. JPEG
and PNG density can be set by setting the "x-dpi" and "y-dpi" parameters
to the appropriate values in dots per inch.

Text chunks can be attached to PNG images by specifying parameters of
the form "tEXt::key", where key is an ASCII string of length 1-79.
The values are UTF-8 encoded strings. The PNG compression level can
be specified using the "compression" parameter; it's value is in an
integer in the range of [0,9].

ICC color profiles can also be embedded into PNG, JPEG and TIFF images.
The "icc-profile" value should be the complete ICC profile encoded
into base64.

|[
gchar *contents;
gchar *contents_encode;
gsize length;
g_file_get_contents ("/home/hughsie/.color/icc/L225W.icm", &amp;contents, &amp;length, NULL);
contents_encode = g_base64_encode ((const guchar *) contents, length);
gdk_pixbuf_save (pixbuf, handle, "png", &amp;error, "icc-profile", contents_encode, NULL);
]|

TIFF images recognize: (1) a "bits-per-sample" option (integer) which
can be either 1 for saving bi-level CCITTFAX4 images, or 8 for saving
8-bits per sample; (2) a "compression" option (integer) which can be
1 for no compression, 2 for Huffman, 5 for LZW, 7 for JPEG and 8 for
DEFLATE (see the libtiff documentation and tiff.h for all supported
codec values); (3) an "icc-profile" option (zero-terminated string)
containing a base64 encoded ICC color profile.

ICO images can be saved in depth 16, 24, or 32, by using the "depth"
parameter. When the ICO saver is given "x_hot" and "y_hot" parameters,
it produces a CUR instead of an ICO.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="316"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="2486">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2416">a #GdkPixbuf.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2417">name of file to save.</doc>
            <type name="filename" c:type="const char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2418">name of file format.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2419">return location for error, or %NULL</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2420">list of key-value save options, followed by %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_buffer"
              c:identifier="gdk_pixbuf_save_to_buffer"
              version="2.4"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="2731">Saves pixbuf to a new buffer in format @type, which is currently "jpeg",
"png", "tiff", "ico" or "bmp".  This is a convenience function that uses
gdk_pixbuf_save_to_callback() to do the real work. Note that the buffer
is not nul-terminated and may contain embedded  nuls.
If @error is set, %FALSE will be returned and @buffer will be set to
%NULL. Possible errors include those in the #GDK_PIXBUF_ERROR
domain.

See gdk_pixbuf_save() for more details.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="386"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="2751">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2733">a #GdkPixbuf.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="buffer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2734">location to receive a pointer
  to the new buffer.</doc>
            <array length="1" zero-terminated="0" c:type="gchar**">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="buffer_size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2736">location to receive the size of the new buffer.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2737">name of file format.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2738">return location for error, or %NULL</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2739">list of key-value save options</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_bufferv"
              c:identifier="gdk_pixbuf_save_to_bufferv"
              version="2.4"
              throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="2819">Saves pixbuf to a new buffer in format @type, which is currently "jpeg",
"tiff", "png", "ico" or "bmp".  See gdk_pixbuf_save_to_buffer()
for more details.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="394"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="2834">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2821">a #GdkPixbuf.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="buffer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2822">
  location to receive a pointer to the new buffer.</doc>
            <array length="1" zero-terminated="0" c:type="gchar**">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="buffer_size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2824">location to receive the size of the new buffer.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2825">name of file format.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="option_keys" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2826">name of options to set, %NULL-terminated</doc>
            <array c:type="char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="option_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2827">values for named options</doc>
            <array c:type="char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_callback"
              c:identifier="gdk_pixbuf_save_to_callback"
              version="2.4"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="2626">Saves pixbuf in format @type by feeding the produced data to a
callback. Can be used when you want to store the image to something
other than a file, such as an in-memory buffer or a socket.
If @error is set, %FALSE will be returned. Possible errors
include those in the #GDK_PIXBUF_ERROR domain and whatever the save
function generates.

See gdk_pixbuf_save() for more details.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="367"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="2645">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2628">a #GdkPixbuf.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="save_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2629">a function that is called to save each block of data that
  the save routine generates.</doc>
            <type name="PixbufSaveFunc" c:type="GdkPixbufSaveFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2631">user data to pass to the save function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2632">name of file format.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2633">return location for error, or %NULL</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2634">list of key-value save options</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_callbackv"
              c:identifier="gdk_pixbuf_save_to_callbackv"
              version="2.4"
              throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="2680">Saves pixbuf to a callback in format @type, which is currently "jpeg",
"png", "tiff", "ico" or "bmp".  If @error is set, %FALSE will be returned. See
gdk_pixbuf_save_to_callback () for more details.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="375"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="2695">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2682">a #GdkPixbuf.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="save_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2683">a function that is called to save each block of data that
  the save routine generates.</doc>
            <type name="PixbufSaveFunc" c:type="GdkPixbufSaveFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2685">user data to pass to the save function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2686">name of file format.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="option_keys" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2687">name of options to set, %NULL-terminated</doc>
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="option_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2688">values for named options</doc>
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_stream"
              c:identifier="gdk_pixbuf_save_to_stream"
              version="2.14"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="2958">Saves @pixbuf to an output stream.

Supported file formats are currently "jpeg", "tiff", "png", "ico" or
"bmp". See gdk_pixbuf_save_to_buffer() for more details.

The @cancellable can be used to abort the operation from another
thread. If the operation was cancelled, the error %G_IO_ERROR_CANCELLED
will be returned. Other possible errors are in the #GDK_PIXBUF_ERROR
and %G_IO_ERROR domains.

The stream is not closed.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="435"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="2979">%TRUE if the pixbuf was saved successfully, %FALSE if an
    error was set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2960">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2961">a #GOutputStream to save the pixbuf to</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2962">name of file format</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2963">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2964">return location for error, or %NULL</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2965">list of key-value save options</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_stream_async"
              c:identifier="gdk_pixbuf_save_to_stream_async"
              version="2.24"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="3110">Saves @pixbuf to an output stream asynchronously.

For more details see gdk_pixbuf_save_to_stream(), which is the synchronous
version of this function.

When the operation is finished, @callback will be called in the main thread.
You can then call gdk_pixbuf_save_to_stream_finish() to get the result of the operation.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="443"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3112">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3113">a #GOutputStream to which to save the pixbuf</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3114">name of file format</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3115">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3116">a #GAsyncReadyCallback to call when the pixbuf is saved</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3117">the data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3118">list of key-value save options</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_streamv"
              c:identifier="gdk_pixbuf_save_to_streamv"
              version="2.36"
              throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="2918">Saves @pixbuf to an output stream.

Supported file formats are currently "jpeg", "tiff", "png", "ico" or
"bmp". See gdk_pixbuf_save_to_stream() for more details.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="466"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="2933">%TRUE if the pixbuf was saved successfully, %FALSE if an
    error was set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2920">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2921">a #GOutputStream to save the pixbuf to</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2922">name of file format</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="option_keys" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2923">name of options to set, %NULL-terminated</doc>
            <array c:type="char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="option_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2924">values for named options</doc>
            <array c:type="char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2925">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_streamv_async"
              c:identifier="gdk_pixbuf_save_to_streamv_async"
              version="2.36">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="3054">Saves @pixbuf to an output stream asynchronously.

For more details see gdk_pixbuf_save_to_streamv(), which is the synchronous
version of this function.

When the operation is finished, @callback will be called in the main thread.
You can then call gdk_pixbuf_save_to_stream_finish() to get the result of the operation.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="456"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3056">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3057">a #GOutputStream to which to save the pixbuf</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3058">name of file format</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="option_keys" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3059">name of options to set, %NULL-terminated</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="option_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3060">values for named options</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3061">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3062">a #GAsyncReadyCallback to call when the pixbuf is saved</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3063">the data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="savev" c:identifier="gdk_pixbuf_savev" throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="2518">Saves pixbuf to a file in @type, which is currently "jpeg", "png", "tiff", "ico" or "bmp".
If @error is set, %FALSE will be returned.
See gdk_pixbuf_save () for more details.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="323"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="2531">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2520">a #GdkPixbuf.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2521">name of file to save.</doc>
            <type name="filename" c:type="const char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2522">name of file format.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="option_keys" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2523">name of options to set, %NULL-terminated</doc>
            <array c:type="char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="option_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2524">values for named options</doc>
            <array c:type="char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="scale" c:identifier="gdk_pixbuf_scale">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
             line="71">Creates a transformation of the source image @src by scaling by
@scale_x and @scale_y then translating by @offset_x and @offset_y,
then renders the rectangle (@dest_x, @dest_y, @dest_width,
@dest_height) of the resulting image onto the destination image
replacing the previous contents.

Try to use gdk_pixbuf_scale_simple() first, this function is
the industrial-strength power tool you can fall back to if
gdk_pixbuf_scale_simple() isn't powerful enough.

If the source rectangle overlaps the destination rectangle on the
same pixbuf, it will be overwritten during the scaling which
results in rendering artifacts.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="73">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="74">the #GdkPixbuf into which to render the results</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="dest_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="75">the left coordinate for region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="76">the top coordinate for region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="77">the width of the region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="78">the height of the region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="offset_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="79">the offset in the X direction (currently rounded to an integer)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="offset_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="80">the offset in the Y direction (currently rounded to an integer)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="81">the scale factor in the X direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="82">the scale factor in the Y direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="interp_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="83">the interpolation type for the transformation.</doc>
            <type name="InterpType" c:type="GdkInterpType"/>
          </parameter>
        </parameters>
      </method>
      <method name="scale_simple" c:identifier="gdk_pixbuf_scale_simple">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
             line="279">Create a new #GdkPixbuf containing a copy of @src scaled to
@dest_width x @dest_height. Leaves @src unaffected.  @interp_type
should be #GDK_INTERP_NEAREST if you want maximum speed (but when
scaling down #GDK_INTERP_NEAREST is usually unusably ugly).  The
default @interp_type should be #GDK_INTERP_BILINEAR which offers
reasonable quality and speed.

You can scale a sub-portion of @src by creating a sub-pixbuf
pointing into @src; see gdk_pixbuf_new_subpixbuf().

If @dest_width and @dest_height are equal to the @src width and height, a
copy of @src is returned, avoiding any scaling.

For more complicated scaling/alpha blending see gdk_pixbuf_scale()
and gdk_pixbuf_composite().</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
                         line="141"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
               line="302">the new #GdkPixbuf, or %NULL if not enough memory could be
allocated for it.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="281">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="282">the width of destination image</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="283">the height of destination image</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="interp_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="284">the interpolation type for the transformation.</doc>
            <type name="InterpType" c:type="GdkInterpType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_option"
              c:identifier="gdk_pixbuf_set_option"
              version="2.2">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="1214">Attaches a key/value pair as an option to a #GdkPixbuf. If @key already
exists in the list of options attached to @pixbuf, the new value is
ignored and %FALSE is returned.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="500"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf.c"
               line="1224">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="1216">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="1217">a nul-terminated string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="1218">a nul-terminated string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="gdk_pixbuf_unref"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.0">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="396">Removes a reference from a pixbuf.</doc>
        <doc-deprecated xml:space="preserve">Use g_object_unref().</doc-deprecated>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h"
                         line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf.c"
                 line="398">A pixbuf.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="bits-per-sample"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="261">The number of bits per sample.
Currently only 8 bit per sample are supported.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="colorspace"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Colorspace"/>
      </property>
      <property name="has-alpha"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="height"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="n-channels"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="228">The number of samples per pixel.
Currently, only 3 or 4 samples per pixel are supported.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="pixel-bytes"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.Bytes"/>
      </property>
      <property name="pixels"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="rowstride"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf.c"
             line="297">The number of bytes between the start of a row and
the start of the next row. This number must (obviously)
be at least as large as the width of the pixbuf.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="width"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <enumeration name="PixbufAlphaMode"
                 deprecated="1"
                 glib:type-name="GdkPixbufAlphaMode"
                 glib:get-type="gdk_pixbuf_alpha_mode_get_type"
                 c:type="GdkPixbufAlphaMode">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-core.h"
           line="39">These values can be passed to
gdk_pixbuf_xlib_render_to_drawable_alpha() to control how the alpha
channel of an image should be handled.  This function can create a
bilevel clipping mask (black and white) and use it while painting
the image.  In the future, when the X Window System gets an alpha
channel extension, it will be possible to do full alpha
compositing onto arbitrary drawables.  For now both cases fall
back to a bilevel clipping mask.</doc>
      <doc-deprecated xml:space="preserve">it is unused since 2.42.</doc-deprecated>
      <member name="bilevel"
              value="0"
              c:identifier="GDK_PIXBUF_ALPHA_BILEVEL"
              glib:nick="bilevel">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-core.h"
             line="41">A bilevel clipping mask (black and white)
 will be created and used to draw the image.  Pixels below 0.5 opacity
 will be considered fully transparent, and all others will be
 considered fully opaque.</doc>
      </member>
      <member name="full"
              value="1"
              c:identifier="GDK_PIXBUF_ALPHA_FULL"
              glib:nick="full">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-core.h"
             line="45">For now falls back to #GDK_PIXBUF_ALPHA_BILEVEL.
 In the future it will do full alpha compositing.</doc>
      </member>
    </enumeration>
    <class name="PixbufAnimation"
           c:symbol-prefix="pixbuf_animation"
           c:type="GdkPixbufAnimation"
           parent="GObject.Object"
           glib:type-name="GdkPixbufAnimation"
           glib:get-type="gdk_pixbuf_animation_get_type">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
           line="39">An opaque struct representing an animation.</doc>
      <constructor name="new_from_file"
                   c:identifier="gdk_pixbuf_animation_new_from_file"
                   throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
             line="138">Creates a new animation by loading it from a file. The file format is
detected automatically. If the file's format does not support multi-frame
images, then an animation with a single frame will be created. Possible errors
are in the #GDK_PIXBUF_ERROR and #G_FILE_ERROR domains.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
               line="149">A newly-created animation with a reference count of 1, or %NULL
if any of several error conditions ocurred:  the file could not be opened,
there was no loader for the file's format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.</doc>
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="140">Name of file to load, in the GLib file
    name encoding</doc>
            <type name="filename" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_resource"
                   c:identifier="gdk_pixbuf_animation_new_from_resource"
                   version="2.28"
                   throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
             line="495">Creates a new pixbuf animation by loading an image from an resource.

The file format is detected automatically. If %NULL is returned, then
@error will be set.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
               line="505">A newly-created animation, or %NULL if any of several error
conditions occurred: the file could not be opened, the image format is
not supported, there was not enough memory to allocate the image buffer,
the stream contained invalid data, or the operation was cancelled.</doc>
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="resource_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="497">the path of the resource file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stream"
                   c:identifier="gdk_pixbuf_animation_new_from_stream"
                   version="2.28"
                   throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
             line="336">Creates a new animation by loading it from an input stream.

The file format is detected automatically. If %NULL is returned, then
@error will be set. The @cancellable can be used to abort the operation
from another thread. If the operation was cancelled, the error
%G_IO_ERROR_CANCELLED will be returned. Other possible errors are in
the #GDK_PIXBUF_ERROR and %G_IO_ERROR domains.

The stream is not closed.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
               line="352">A newly-created pixbuf, or %NULL if any of several error
conditions occurred: the file could not be opened, the image format is
not supported, there was not enough memory to allocate the image buffer,
the stream contained invalid data, or the operation was cancelled.</doc>
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="338">a #GInputStream to load the pixbuf from</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="339">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stream_finish"
                   c:identifier="gdk_pixbuf_animation_new_from_stream_finish"
                   version="2.28"
                   throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
             line="469">Finishes an asynchronous pixbuf animation creation operation started with
gdk_pixbuf_animation_new_from_stream_async().</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
               line="477">a #GdkPixbufAnimation or %NULL on error. Free the returned
object with g_object_unref().</doc>
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="async_result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="471">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new_from_stream_async"
                c:identifier="gdk_pixbuf_animation_new_from_stream_async"
                version="2.28">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
             line="433">Creates a new animation by asynchronously loading an image from an input stream.

For more details see gdk_pixbuf_new_from_stream(), which is the synchronous
version of this function.

When the operation is finished, @callback will be called in the main thread.
You can then call gdk_pixbuf_animation_new_from_stream_finish() to get the
result of the operation.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="435">a #GInputStream from which to load the animation</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="436">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="437">a #GAsyncReadyCallback to call when the pixbuf is loaded</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="438">the data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_height" c:identifier="gdk_pixbuf_animation_get_height">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
             line="628">Queries the height of the bounding box of a pixbuf animation.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
               line="634">Height of the bounding box of the animation.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="630">An animation.</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iter" c:identifier="gdk_pixbuf_animation_get_iter">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
             line="651">Get an iterator for displaying an animation. The iterator provides
the frames that should be displayed at a given time. It should be
freed after use with g_object_unref().

@start_time would normally come from g_get_current_time(), and marks
the beginning of animation playback. After creating an iterator, you
should immediately display the pixbuf returned by
gdk_pixbuf_animation_iter_get_pixbuf(). Then, you should install
a timeout (with g_timeout_add()) or by some other mechanism ensure
that you'll update the image after
gdk_pixbuf_animation_iter_get_delay_time() milliseconds. Each time
the image is updated, you should reinstall the timeout with the new,
possibly-changed delay time.

As a shortcut, if @start_time is %NULL, the result of
g_get_current_time() will be used automatically.

To update the image (i.e. possibly change the result of
gdk_pixbuf_animation_iter_get_pixbuf() to a new frame of the animation),
call gdk_pixbuf_animation_iter_advance().

If you're using #GdkPixbufLoader, in addition to updating the image
after the delay time, you should also update it whenever you
receive the area_updated signal and
gdk_pixbuf_animation_iter_on_currently_loading_frame() returns
%TRUE. In this case, the frame currently being fed into the loader
has received new data, so needs to be refreshed. The delay time for
a frame may also be modified after an area_updated signal, for
example if the delay time for a frame is encoded in the data after
the frame itself. So your timeout should be reinstalled after any
area_updated signal.

A delay time of -1 is possible, indicating "infinite."</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="111"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
               line="690">an iterator to move over the animation</doc>
          <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="653">a #GdkPixbufAnimation</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
          <parameter name="start_time"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="654">time when the animation starts playing</doc>
            <type name="GLib.TimeVal" c:type="const GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_static_image"
              c:identifier="gdk_pixbuf_animation_get_static_image">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
             line="585">If an animation is really just a plain image (has only one frame),
this function returns that image. If the animation is an animation,
this function returns a reasonable thing to display as a static
unanimated image, which might be the first frame, or something more
sophisticated. If an animation hasn't loaded any frames yet, this
function will return %NULL.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
               line="596">unanimated image representing the animation</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="587">a #GdkPixbufAnimation</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width" c:identifier="gdk_pixbuf_animation_get_width">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
             line="606">Queries the width of the bounding box of a pixbuf animation.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
               line="612">Width of the bounding box of the animation.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="608">An animation.</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_static_image"
              c:identifier="gdk_pixbuf_animation_is_static_image">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
             line="566">If you load a file with gdk_pixbuf_animation_new_from_file() and it
turns out to be a plain, unanimated image, then this function will
return %TRUE. Use gdk_pixbuf_animation_get_static_image() to retrieve
the image.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
               line="575">%TRUE if the "animation" was really just an image</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="568">a #GdkPixbufAnimation</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref"
              c:identifier="gdk_pixbuf_animation_ref"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.0">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
             line="536">Adds a reference to an animation.</doc>
        <doc-deprecated xml:space="preserve">Use g_object_ref().</doc-deprecated>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="95"/>
        <return-value>
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
               line="542">The same as the @animation argument.</doc>
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="538">An animation.</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="gdk_pixbuf_animation_unref"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.0">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
             line="552">Removes a reference from an animation.</doc>
        <doc-deprecated xml:space="preserve">Use g_object_unref().</doc-deprecated>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="554">An animation.</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <class name="PixbufAnimationIter"
           c:symbol-prefix="pixbuf_animation_iter"
           c:type="GdkPixbufAnimationIter"
           parent="GObject.Object"
           glib:type-name="GdkPixbufAnimationIter"
           glib:get-type="gdk_pixbuf_animation_iter_get_type">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
           line="47">An opaque struct representing an iterator which points to a
certain position in an animation.</doc>
      <method name="advance" c:identifier="gdk_pixbuf_animation_iter_advance">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
             line="793">Possibly advances an animation to a new frame. Chooses the frame based
on the start time passed to gdk_pixbuf_animation_get_iter().

@current_time would normally come from g_get_current_time(), and
must be greater than or equal to the time passed to
gdk_pixbuf_animation_get_iter(), and must increase or remain
unchanged each time gdk_pixbuf_animation_iter_get_pixbuf() is
called. That is, you can't go backward in time; animations only
play forward.

As a shortcut, pass %NULL for the current time and g_get_current_time()
will be invoked on your behalf. So you only need to explicitly pass
@current_time if you're doing something odd like playing the animation
at double speed.

If this function returns %FALSE, there's no need to update the animation
display, assuming the display had been rendered prior to advancing;
if %TRUE, you need to call gdk_pixbuf_animation_iter_get_pixbuf()
and update the display with the new pixbuf.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
               line="818">%TRUE if the image may need updating</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="795">a #GdkPixbufAnimationIter</doc>
            <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
          </instance-parameter>
          <parameter name="current_time"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="796">current time</doc>
            <type name="GLib.TimeVal" c:type="const GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_delay_time"
              c:identifier="gdk_pixbuf_animation_iter_get_delay_time">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
             line="721">Gets the number of milliseconds the current pixbuf should be displayed,
or -1 if the current pixbuf should be displayed forever. g_timeout_add()
conveniently takes a timeout in milliseconds, so you can use a timeout
to schedule the next update.

Note that some formats, like GIF, might clamp the timeout values in the
image file to avoid updates that are just too quick. The minimum timeout
for GIF images is currently 20 milliseconds.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
               line="734">delay time in milliseconds (thousandths of a second)</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="723">an animation iterator</doc>
            <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixbuf"
              c:identifier="gdk_pixbuf_animation_iter_get_pixbuf">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
             line="745">Gets the current pixbuf which should be displayed; the pixbuf might not
be the same size as the animation itself
(gdk_pixbuf_animation_get_width(), gdk_pixbuf_animation_get_height()).
This pixbuf should be displayed for
gdk_pixbuf_animation_iter_get_delay_time() milliseconds. The caller
of this function does not own a reference to the returned pixbuf;
the returned pixbuf will become invalid when the iterator advances
to the next frame, which may happen anytime you call
gdk_pixbuf_animation_iter_advance(). Copy the pixbuf to keep it
(don't just add a reference), as it may get recycled as you advance
the iterator.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
               line="761">the pixbuf to be displayed</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="747">an animation iterator</doc>
            <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="on_currently_loading_frame"
              c:identifier="gdk_pixbuf_animation_iter_on_currently_loading_frame">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
             line="772">Used to determine how to respond to the area_updated signal on
#GdkPixbufLoader when loading an animation. area_updated is emitted
for an area of the frame currently streaming in to the loader. So if
you're on the currently loading frame, you need to redraw the screen for
the updated area.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
               line="782">%TRUE if the frame we're on is partially loaded, or the last frame</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="774">a #GdkPixbufAnimationIter</doc>
            <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <callback name="PixbufDestroyNotify" c:type="GdkPixbufDestroyNotify">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-core.h"
           line="97">A function of this type is responsible for freeing the pixel array
of a pixbuf.  The gdk_pixbuf_new_from_data() function lets you
pass in a pre-allocated pixel array so that a pixbuf can be
created from it; in this case you will need to pass in a function
of #GdkPixbufDestroyNotify so that the pixel data can be freed
when the pixbuf is finalized.</doc>
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="110"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pixels" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-core.h"
               line="99">The pixel array of the pixbuf
  that is being finalized.</doc>
          <array zero-terminated="0" c:type="guchar*">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-core.h"
               line="101">User closure data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="PixbufError"
                 glib:type-name="GdkPixbufError"
                 glib:get-type="gdk_pixbuf_error_get_type"
                 c:type="GdkPixbufError"
                 glib:error-domain="gdk-pixbuf-error-quark">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-core.h"
           line="121">An error code in the #GDK_PIXBUF_ERROR domain. Many gdk-pixbuf
operations can cause errors in this domain, or in the #G_FILE_ERROR
domain.</doc>
      <member name="corrupt_image"
              value="0"
              c:identifier="GDK_PIXBUF_ERROR_CORRUPT_IMAGE"
              glib:nick="corrupt-image">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-core.h"
             line="123">An image file was broken somehow.</doc>
      </member>
      <member name="insufficient_memory"
              value="1"
              c:identifier="GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY"
              glib:nick="insufficient-memory">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-core.h"
             line="124">Not enough memory.</doc>
      </member>
      <member name="bad_option"
              value="2"
              c:identifier="GDK_PIXBUF_ERROR_BAD_OPTION"
              glib:nick="bad-option">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-core.h"
             line="125">A bad option was passed to a pixbuf save module.</doc>
      </member>
      <member name="unknown_type"
              value="3"
              c:identifier="GDK_PIXBUF_ERROR_UNKNOWN_TYPE"
              glib:nick="unknown-type">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-core.h"
             line="126">Unknown image type.</doc>
      </member>
      <member name="unsupported_operation"
              value="4"
              c:identifier="GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION"
              glib:nick="unsupported-operation">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-core.h"
             line="127">Don't know how to perform the
 given operation on the type of image at hand.</doc>
      </member>
      <member name="failed"
              value="5"
              c:identifier="GDK_PIXBUF_ERROR_FAILED"
              glib:nick="failed">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-core.h"
             line="129">Generic failure code, something went wrong.</doc>
      </member>
      <member name="incomplete_animation"
              value="6"
              c:identifier="GDK_PIXBUF_ERROR_INCOMPLETE_ANIMATION"
              glib:nick="incomplete-animation">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-core.h"
             line="130">Only part of the animation was loaded.</doc>
      </member>
      <function name="quark" c:identifier="gdk_pixbuf_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <record name="PixbufFormat"
            c:type="GdkPixbufFormat"
            glib:type-name="GdkPixbufFormat"
            glib:get-type="gdk_pixbuf_format_get_type"
            c:symbol-prefix="pixbuf_format">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="42"/>
      <method name="copy" c:identifier="gdk_pixbuf_format_copy" version="2.22">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="3414">Creates a copy of @format</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="3420">the newly allocated copy of a #GdkPixbufFormat. Use
  gdk_pixbuf_format_free() to free the resources when done</doc>
          <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3416">a #GdkPixbufFormat</doc>
            <type name="PixbufFormat" c:type="const GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gdk_pixbuf_format_free" version="2.22">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="3434">Frees the resources allocated when copying a #GdkPixbufFormat
using gdk_pixbuf_format_copy()</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3436">a #GdkPixbufFormat</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="gdk_pixbuf_format_get_description"
              version="2.2">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="3213">Returns a description of the format.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="3219">a description of the format.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3215">a #GdkPixbufFormat</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extensions"
              c:identifier="gdk_pixbuf_format_get_extensions"
              version="2.2">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="3258">Returns the filename extensions typically used for files in the
given format.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="3265">a %NULL-terminated array of filename extensions which must be
freed with g_strfreev() when it is no longer needed.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3260">a #GdkPixbufFormat</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_license"
              c:identifier="gdk_pixbuf_format_get_license"
              version="2.6">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="3357">Returns information about the license of the image loader for the format. The
returned string should be a shorthand for a wellknown license, e.g. "LGPL",
"GPL", "QPL", "GPL/QPL", or "other" to indicate some other license.  This
string should be freed with g_free() when it's no longer needed.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="3366">a string describing the license of @format.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3359">a #GdkPixbufFormat</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mime_types"
              c:identifier="gdk_pixbuf_format_get_mime_types"
              version="2.2">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="3239">Returns the mime types supported by the format.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="3245">a %NULL-terminated array of mime types which must be freed with
g_strfreev() when it is no longer needed.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3241">a #GdkPixbufFormat</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="gdk_pixbuf_format_get_name"
              version="2.2">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="3195">Returns the name of the format.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="3201">the name of the format.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3197">a #GdkPixbufFormat</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_disabled"
              c:identifier="gdk_pixbuf_format_is_disabled"
              version="2.6">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="3317">Returns whether this image format is disabled. See
gdk_pixbuf_format_set_disabled().</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="3324">whether this image format is disabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3319">a #GdkPixbufFormat</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_save_option_supported"
              c:identifier="gdk_pixbuf_format_is_save_option_supported"
              version="2.36">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="3450">Returns %TRUE if the save option specified by @option_key is supported when
saving a pixbuf using the module implementing @format.
See gdk_pixbuf_save() for more information about option keys.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="3459">%TRUE if the specified option is supported</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3452">a #GdkPixbufFormat</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
          <parameter name="option_key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3453">the name of an option</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_scalable"
              c:identifier="gdk_pixbuf_format_is_scalable"
              version="2.6">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="3296">Returns whether this image format is scalable. If a file is in a
scalable format, it is preferable to load it at the desired size,
rather than loading it at the default size and scaling the
resulting pixbuf to the desired size.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="3305">whether this image format is scalable.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3298">a #GdkPixbufFormat</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_writable"
              c:identifier="gdk_pixbuf_format_is_writable"
              version="2.2">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="3278">Returns whether pixbufs can be saved in the given format.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-io.c"
               line="3284">whether pixbufs can be saved in the given format.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3280">a #GdkPixbufFormat</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_disabled"
              c:identifier="gdk_pixbuf_format_set_disabled"
              version="2.6">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-io.c"
             line="3336">Disables or enables an image format. If a format is disabled,
gdk-pixbuf won't use the image loader for this format to load
images. Applications can use this to avoid using image loaders
with an inappropriate license, see gdk_pixbuf_format_get_license().</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3338">a #GdkPixbufFormat</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
          <parameter name="disabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3339">%TRUE to disable the format @format</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="PixbufLoader"
           c:symbol-prefix="pixbuf_loader"
           c:type="GdkPixbufLoader"
           parent="GObject.Object"
           glib:type-name="GdkPixbufLoader"
           glib:get-type="gdk_pixbuf_loader_get_type"
           glib:type-struct="PixbufLoaderClass">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
           line="46">The GdkPixbufLoader struct contains only private
fields.</doc>
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h" line="80"/>
      <constructor name="new" c:identifier="gdk_pixbuf_loader_new">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
             line="598">Creates a new pixbuf loader object.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                         line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
               line="603">A newly-created pixbuf loader.</doc>
          <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_mime_type"
                   c:identifier="gdk_pixbuf_loader_new_with_mime_type"
                   version="2.4"
                   throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
             line="654">Creates a new pixbuf loader object that always attempts to parse
image data as if it were an image of mime type @mime_type, instead of
identifying the type automatically. Useful if you want an error if
the image isn't the expected mime type, for loading image formats
that can't be reliably identified by looking at the data, or if
the user manually forces a specific mime type.

The list of supported mime types depends on what image loaders
are installed, but typically "image/png", "image/jpeg", "image/gif",
"image/tiff" and "image/x-xpixmap" are among the supported mime types.
To obtain the full list of supported mime types, call
gdk_pixbuf_format_get_mime_types() on each of the #GdkPixbufFormat
structs returned by gdk_pixbuf_get_formats().</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                         line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
               line="673">A newly-created pixbuf loader.</doc>
          <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
        </return-value>
        <parameters>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="656">the mime type to be loaded</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_type"
                   c:identifier="gdk_pixbuf_loader_new_with_type"
                   throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
             line="611">Creates a new pixbuf loader object that always attempts to parse
image data as if it were an image of type @image_type, instead of
identifying the type automatically. Useful if you want an error if
the image isn't the expected type, for loading image formats
that can't be reliably identified by looking at the data, or if
the user manually forces a specific type.

The list of supported image formats depends on what image loaders
are installed, but typically "png", "jpeg", "gif", "tiff" and
"xpm" are among the supported formats. To obtain the full list of
supported image formats, call gdk_pixbuf_format_get_name() on each
of the #GdkPixbufFormat structs returned by gdk_pixbuf_get_formats().</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                         line="87"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
               line="629">A newly-created pixbuf loader.</doc>
          <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
        </return-value>
        <parameters>
          <parameter name="image_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="613">name of the image format to be loaded with the image</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="area_prepared">
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="area_updated">
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="closed">
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="size_prepared">
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="close" c:identifier="gdk_pixbuf_loader_close" throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
             line="793">Informs a pixbuf loader that no further writes with
gdk_pixbuf_loader_write() will occur, so that it can free its
internal loading structures. Also, tries to parse any data that
hasn't yet been parsed; if the remaining data is partial or
corrupt, an error will be returned.  If %FALSE is returned, @error
will be set to an error from the #GDK_PIXBUF_ERROR or #G_FILE_ERROR
domains. If you're just cancelling a load rather than expecting it
to be finished, passing %NULL for @error to ignore it is
reasonable.

Remember that this does not unref the loader, so if you plan not to
use it anymore, please g_object_unref() it.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
               line="811">%TRUE if all image data written so far was successfully
            passed out via the update_area signal</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="795">A pixbuf loader.</doc>
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_animation"
              c:identifier="gdk_pixbuf_loader_get_animation">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
             line="768">Queries the #GdkPixbufAnimation that a pixbuf loader is currently creating.
In general it only makes sense to call this function after the "area-prepared"
signal has been emitted by the loader. If the loader doesn't have enough
bytes yet (hasn't emitted the "area-prepared" signal) this function will
return %NULL.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
               line="778">The #GdkPixbufAnimation that the loader is loading, or %NULL if
not enough data has been read to determine the information.</doc>
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="770">A pixbuf loader</doc>
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_format"
              c:identifier="gdk_pixbuf_loader_get_format"
              version="2.2">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
             line="878">Obtains the available information about the format of the
currently loading image file.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                         line="113"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
               line="885">A #GdkPixbufFormat or
%NULL. The return value is owned by GdkPixbuf and should not be
freed.</doc>
          <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="880">A pixbuf loader.</doc>
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixbuf" c:identifier="gdk_pixbuf_loader_get_pixbuf">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
             line="734">Queries the #GdkPixbuf that a pixbuf loader is currently creating.
In general it only makes sense to call this function after the
"area-prepared" signal has been emitted by the loader; this means
that enough data has been read to know the size of the image that
will be allocated.  If the loader has not received enough data via
gdk_pixbuf_loader_write(), then this function returns %NULL.  The
returned pixbuf will be the same in all future calls to the loader,
so simply calling g_object_ref() should be sufficient to continue
using it.  Additionally, if the loader is an animation, it will
return the "static image" of the animation
(see gdk_pixbuf_animation_get_static_image()).</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
               line="750">The #GdkPixbuf that the loader is creating, or %NULL if not
enough data has been read to determine how to create the image buffer.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="736">A pixbuf loader.</doc>
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="gdk_pixbuf_loader_set_size"
              version="2.2">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
             line="251">Causes the image to be scaled while it is loaded. The desired
image size can be determined relative to the original size of
the image by calling gdk_pixbuf_loader_set_size() from a
signal handler for the ::size-prepared signal.

Attempts to set the desired image size  are ignored after the
emission of the ::size-prepared signal.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="253">A pixbuf loader.</doc>
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="254">The desired width of the image being loaded.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="255">The desired height of the image being loaded.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="write" c:identifier="gdk_pixbuf_loader_write" throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
             line="496">This will cause a pixbuf loader to parse the next @count bytes of
an image.  It will return %TRUE if the data was loaded successfully,
and %FALSE if an error occurred.  In the latter case, the loader
will be closed, and will not accept further writes. If %FALSE is
returned, @error will be set to an error from the #GDK_PIXBUF_ERROR
or #G_FILE_ERROR domains.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
               line="510">%TRUE if the write was successful, or %FALSE if the loader
cannot parse the buffer.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="498">A pixbuf loader.</doc>
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="499">Pointer to image data.</doc>
            <array length="1" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="500">Length of the @buf buffer in bytes.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_bytes"
              c:identifier="gdk_pixbuf_loader_write_bytes"
              version="2.30"
              throws="1">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
             line="562">This will cause a pixbuf loader to parse a buffer inside a #GBytes
for an image.  It will return %TRUE if the data was loaded successfully,
and %FALSE if an error occurred.  In the latter case, the loader
will be closed, and will not accept further writes. If %FALSE is
returned, @error will be set to an error from the #GDK_PIXBUF_ERROR
or #G_FILE_ERROR domains.

See also: gdk_pixbuf_loader_write()</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
               line="577">%TRUE if the write was successful, or %FALSE if the loader
cannot parse the buffer.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="564">A pixbuf loader.</doc>
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="565">The image data as a #GBytes</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <glib:signal name="area-prepared" when="last">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
             line="151">This signal is emitted when the pixbuf loader has allocated the
pixbuf in the desired size.  After this signal is emitted,
applications can call gdk_pixbuf_loader_get_pixbuf() to fetch
the partially-loaded pixbuf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="area-updated" when="last">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
             line="169">This signal is emitted when a significant area of the image being
loaded has been updated.  Normally it means that a complete
scanline has been read in, but it could be a different area as
well.  Applications can use this signal to know when to repaint
areas of an image that is being loaded.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="172">X offset of upper-left corner of the updated area.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="173">Y offset of upper-left corner of the updated area.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="174">Width of updated area.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="175">Height of updated area.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="closed" when="last">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
             line="196">This signal is emitted when gdk_pixbuf_loader_close() is called.
It can be used by different parts of an application to receive
notification when an image loader is closed by the code that
drives it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="size-prepared" when="last">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
             line="128">This signal is emitted when the pixbuf loader has been fed the
initial amount of data that is required to figure out the size
of the image that it will create.  Applications can call
gdk_pixbuf_loader_set_size() in response to this signal to set
the desired size to which the image should be scaled.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="131">the original width of the image</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="132">the original height of the image</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PixbufLoaderClass"
            c:type="GdkPixbufLoaderClass"
            glib:is-gtype-struct-for="PixbufLoader">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h" line="80"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="size_prepared">
        <callback name="size_prepared">
          <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                           line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="loader" transfer-ownership="none">
              <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="area_prepared">
        <callback name="area_prepared">
          <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                           line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="loader" transfer-ownership="none">
              <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="area_updated">
        <callback name="area_updated">
          <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                           line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="loader" transfer-ownership="none">
              <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="closed">
        <callback name="closed">
          <source-position filename="../gdk-pixbuf/gdk-pixbuf-loader.h"
                           line="79"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="loader" transfer-ownership="none">
              <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="PixbufRotation"
                 glib:type-name="GdkPixbufRotation"
                 glib:get-type="gdk_pixbuf_rotation_get_type"
                 c:type="GdkPixbufRotation">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
           line="79">The possible rotations which can be passed to gdk_pixbuf_rotate_simple().
To make them easier to use, their numerical values are the actual degrees.</doc>
      <member name="none"
              value="0"
              c:identifier="GDK_PIXBUF_ROTATE_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
             line="81">No rotation.</doc>
      </member>
      <member name="counterclockwise"
              value="90"
              c:identifier="GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE"
              glib:nick="counterclockwise">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
             line="82">Rotate by 90 degrees.</doc>
      </member>
      <member name="upsidedown"
              value="180"
              c:identifier="GDK_PIXBUF_ROTATE_UPSIDEDOWN"
              glib:nick="upsidedown">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
             line="83">Rotate by 180 degrees.</doc>
      </member>
      <member name="clockwise"
              value="270"
              c:identifier="GDK_PIXBUF_ROTATE_CLOCKWISE"
              glib:nick="clockwise">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-transform.h"
             line="84">Rotate by 270 degrees.</doc>
      </member>
    </enumeration>
    <callback name="PixbufSaveFunc" c:type="GdkPixbufSaveFunc" version="2.4">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-core.h"
           line="343">Specifies the type of the function passed to
gdk_pixbuf_save_to_callback().  It is called once for each block of
bytes that is "written" by gdk_pixbuf_save_to_callback().  If
successful it should return %TRUE.  If an error occurs it should set
@error and return %FALSE, in which case gdk_pixbuf_save_to_callback()
will fail with the same error.</doc>
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="361"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-core.h"
             line="358">%TRUE if successful, %FALSE (with @error set) if failed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-core.h"
               line="345">bytes to be written.</doc>
          <array length="1" zero-terminated="0" c:type="const gchar*">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-core.h"
               line="346">number of bytes in @buf.</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="error"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-core.h"
               line="347">A location to return an error.</doc>
          <type name="GLib.Error" c:type="GError**"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-core.h"
               line="348">user data passed to gdk_pixbuf_save_to_callback().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="PixbufSimpleAnim"
           c:symbol-prefix="pixbuf_simple_anim"
           c:type="GdkPixbufSimpleAnim"
           parent="PixbufAnimation"
           glib:type-name="GdkPixbufSimpleAnim"
           glib:get-type="gdk_pixbuf_simple_anim_get_type"
           glib:type-struct="PixbufSimpleAnimClass">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.h"
           line="33">An opaque struct representing a simple animation.</doc>
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                       line="39"/>
      <constructor name="new"
                   c:identifier="gdk_pixbuf_simple_anim_new"
                   version="2.8">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.c"
             line="413">Creates a new, empty animation.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                         line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.c"
               line="421">a newly allocated #GdkPixbufSimpleAnim</doc>
          <type name="PixbufSimpleAnim" c:type="GdkPixbufSimpleAnim*"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.c"
                 line="415">the width of the animation</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.c"
                 line="416">the height of the animation</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="rate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.c"
                 line="417">the speed of the animation, in frames per second</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_frame"
              c:identifier="gdk_pixbuf_simple_anim_add_frame"
              version="2.8">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.c"
             line="440">Adds a new frame to @animation. The @pixbuf must
have the dimensions specified when the animation
was constructed.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.c"
                 line="442">a #GdkPixbufSimpleAnim</doc>
            <type name="PixbufSimpleAnim" c:type="GdkPixbufSimpleAnim*"/>
          </instance-parameter>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.c"
                 line="443">the pixbuf to add</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_loop"
              c:identifier="gdk_pixbuf_simple_anim_get_loop"
              version="2.18">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.c"
             line="531">Gets whether @animation should loop indefinitely when it reaches the end.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.c"
               line="537">%TRUE if the animation loops forever, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.c"
                 line="533">a #GdkPixbufSimpleAnim</doc>
            <type name="PixbufSimpleAnim" c:type="GdkPixbufSimpleAnim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_loop"
              c:identifier="gdk_pixbuf_simple_anim_set_loop"
              version="2.18">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.c"
             line="510">Sets whether @animation should loop indefinitely when it reaches the end.</doc>
        <source-position filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.c"
                 line="512">a #GdkPixbufSimpleAnim</doc>
            <type name="PixbufSimpleAnim" c:type="GdkPixbufSimpleAnim*"/>
          </instance-parameter>
          <parameter name="loop" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.c"
                 line="513">whether to loop the animation</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="loop"
                version="2.18"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.c"
             line="152">Whether the animation should loop when it reaches the end.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="PixbufSimpleAnimClass"
            c:type="GdkPixbufSimpleAnimClass"
            disguised="1"
            glib:is-gtype-struct-for="PixbufSimpleAnim">
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                       line="39"/>
    </record>
    <class name="PixbufSimpleAnimIter"
           c:symbol-prefix="pixbuf_simple_anim_iter"
           parent="PixbufAnimationIter"
           glib:type-name="GdkPixbufSimpleAnimIter"
           glib:get-type="gdk_pixbuf_simple_anim_iter_get_type">
    </class>
    <docsection name="animation">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-animation.c"
           line="32">The GdkPixBuf library provides a simple mechanism to load and
represent animations. An animation is conceptually a series of
frames to be displayed over time. The animation may not be
represented as a series of frames internally; for example, it may
be stored as a sprite and instructions for moving the sprite around
a background. To display an animation you don't need to understand
its representation, however; you just ask GdkPixBuf what should
be displayed at a given point in time.</doc>
    </docsection>
    <docsection name="creating">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf.c"
           line="40">The most basic way to create a pixbuf is to wrap an existing pixel
buffer with a #GdkPixbuf structure.  You can use the
gdk_pixbuf_new_from_data() function to do this You need to specify
the destroy notification function that will be called when the
data buffer needs to be freed; this will happen when a #GdkPixbuf
is finalized by the reference counting functions If you have a
chunk of static data compiled into your application, you can pass
in %NULL as the destroy notification function so that the data
will not be freed.

The gdk_pixbuf_new() function can be used as a convenience to
create a pixbuf with an empty buffer.  This is equivalent to
allocating a data buffer using malloc() and then wrapping it with
gdk_pixbuf_new_from_data(). The gdk_pixbuf_new() function will
compute an optimal rowstride so that rendering can be performed
with an efficient algorithm.

As a special case, you can use the gdk_pixbuf_new_from_xpm_data()
function to create a pixbuf from inline XPM image data.

You can also copy an existing pixbuf with the gdk_pixbuf_copy()
function.  This is not the same as just doing a g_object_ref()
on the old pixbuf; the copy function will actually duplicate the
pixel data in memory and create a new #GdkPixbuf structure for it.</doc>
    </docsection>
    <docsection name="file-loading">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-io.c"
           line="50">The GdkPixBuf library provides a simple mechanism for loading
an image from a file in synchronous fashion.  This means that the
library takes control of the application while the file is being
loaded; from the user's point of view, the application will block
until the image is done loading.


This interface can be used by applications in which blocking is
acceptable while an image is being loaded.  It can also be used to
load small images in general.  Applications that need progressive
loading can use the #GdkPixbufLoader functionality instead.</doc>
    </docsection>
    <docsection name="file-saving">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-io.c"
           line="69">These functions allow to save a #GdkPixbuf in a number of
file formats. The formatted data can be written to a file
or to a memory buffer. GdkPixBuf can also call a user-defined
callback on the data, which allows to e.g. write the image
to a socket or store it in a database.</doc>
    </docsection>
    <docsection name="gdk-pixbuf">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf.c"
           line="102">The #GdkPixbuf structure contains
information that describes an image in memory.

## Image Data ## {#image-data}

Image data in a pixbuf is stored in memory in uncompressed,
packed format.  Rows in the image are stored top to bottom, and
in each row pixels are stored from left to right.  There may be
padding at the end of a row.  The "rowstride" value of a pixbuf,
as returned by gdk_pixbuf_get_rowstride(), indicates the number
of bytes between rows.

## put_pixel() Example ## {#put-pixel}

The following code illustrates a simple put_pixel()
function for RGB pixbufs with 8 bits per channel with an alpha
channel.  It is not included in the gdk-pixbuf library for
performance reasons; rather than making several function calls
for each pixel, your own code can take shortcuts.

|[&lt;!-- language="C" --&gt;
static void
put_pixel (GdkPixbuf *pixbuf, int x, int y, guchar red, guchar green, guchar blue, guchar alpha)
{
  int width, height, rowstride, n_channels;
  guchar *pixels, *p;

  n_channels = gdk_pixbuf_get_n_channels (pixbuf);

  g_assert (gdk_pixbuf_get_colorspace (pixbuf) == GDK_COLORSPACE_RGB);
  g_assert (gdk_pixbuf_get_bits_per_sample (pixbuf) == 8);
  g_assert (gdk_pixbuf_get_has_alpha (pixbuf));
  g_assert (n_channels == 4);

  width = gdk_pixbuf_get_width (pixbuf);
  height = gdk_pixbuf_get_height (pixbuf);

  g_assert (x &gt;= 0 &amp;&amp; x &lt; width);
  g_assert (y &gt;= 0 &amp;&amp; y &lt; height);

  rowstride = gdk_pixbuf_get_rowstride (pixbuf);
  pixels = gdk_pixbuf_get_pixels (pixbuf);

  p = pixels + y * rowstride + x * n_channels;
  p[0] = red;
  p[1] = green;
  p[2] = blue;
  p[3] = alpha;
}
]|

This function will not work for pixbufs with images that are
other than 8 bits per sample or channel, but it will work for
most of the pixbufs that GTK+ uses.

If you are doing memcpy() of raw pixbuf data, note that the last row
in the pixbuf may not be as wide as the full rowstride, but rather
just as wide as the pixel data needs to be. That is, it is unsafe to
do `memcpy (dest, pixels, rowstride * height)` to copy a whole pixbuf.
Use gdk_pixbuf_copy() instead, or compute the width in bytes of the
last row as `width * ((n_channels * bits_per_sample + 7) / 8)`.</doc>
    </docsection>
    <docsection name="gdk-pixbuf-loader">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-loader.c"
           line="34">#GdkPixbufLoader provides a way for applications to drive the
process of loading an image, by letting them send the image data
directly to the loader instead of having the loader read the data
from a file.  Applications can use this functionality instead of
gdk_pixbuf_new_from_file() or gdk_pixbuf_animation_new_from_file()
when they need to parse image data in
small chunks.  For example, it should be used when reading an
image from a (potentially) slow network connection, or when
loading an extremely large file.


To use #GdkPixbufLoader to load an image, just create a new one, and
call gdk_pixbuf_loader_write() to send the data to it.  When done,
gdk_pixbuf_loader_close() should be called to end the stream and
finalize everything. The loader will emit three important signals
throughout the process. The first, #GdkPixbufLoader::size-prepared,
will be emitted as soon as the image has enough information to
determine the size of the image to be used. If you want to scale
the image while loading it, you can call gdk_pixbuf_loader_set_size()
in response to this signal.


The second signal, #GdkPixbufLoader::area-prepared, will be emitted as
soon as the pixbuf of the desired has been allocated. You can obtain it
by calling gdk_pixbuf_loader_get_pixbuf(). If you want to use it, simply
ref it. You can also call gdk_pixbuf_loader_get_pixbuf() later and get
the same pixbuf.

The last signal, #GdkPixbufLoader::area-updated, gets emitted every time
a region is updated. This way you can update a partially completed image.
Note that you do not know anything about the completeness of an image
from the updated area. For example, in an interlaced image, you need to
make several passes before the image is done loading.

# Loading an animation

Loading an animation is almost as easy as loading an image. Once the first
#GdkPixbufLoader::area-prepared signal has been emitted, you can call
gdk_pixbuf_loader_get_animation() to get the #GdkPixbufAnimation struct
and gdk_pixbuf_animation_get_iter() to get a #GdkPixbufAnimationIter for
displaying it.</doc>
    </docsection>
    <docsection name="initialization_versions">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-features.h"
           line="10">These macros and variables let you check the version of gdk-pixbuf
you're linking against.</doc>
    </docsection>
    <docsection name="inline">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixdata.c"
           line="25">Using #GdkPixdata, images can be compiled into an application,
making it unnecessary to refer to external image files at runtime.
GdkPixBuf includes a utility named gdk-pixbuf-csource, which
can be used to convert image files into #GdkPixdata structures suitable
for inclusion in C sources. To convert the #GdkPixdata structures back
into #GdkPixbufs, use gdk_pixbuf_from_pixdata.

#GdkPixdata should not be used any more. #GResource should be used to save
the original compressed images inside the program's binary.</doc>
    </docsection>
    <docsection name="module_interface">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-io.c"
           line="81">If GdkPixBuf has been compiled with GModule support, it can be extended by
modules which can load (and perhaps also save) new image and animation
formats. Each loadable module must export a
#GdkPixbufModuleFillInfoFunc function named `fill_info` and
a #GdkPixbufModuleFillVtableFunc function named
`fill_vtable`.

In order to make format-checking work before actually loading the modules
(which may require dlopening image libraries), modules export their
signatures (and other information) via the `fill_info` function. An
external utility, gdk-pixbuf-query-loaders, uses this to create a text
file containing a list of all available loaders and  their signatures.
This file is then read at runtime by GdkPixBuf to obtain the list of
available loaders and their signatures.

Modules may only implement a subset of the functionality available via
#GdkPixbufModule. If a particular functionality is not implemented, the
`fill_vtable` function will simply not set the corresponding
function pointers of the #GdkPixbufModule structure. If a module supports
incremental loading (i.e. provides #begin_load, #stop_load and
#load_increment), it doesn't have to implement #load, since GdkPixBuf can
supply a generic #load implementation wrapping the incremental loading.

Installing a module is a two-step process:
- copy the module file(s) to the loader directory (normally
  `$libdir/gdk-pixbuf-2.0/$version/loaders`, unless overridden by the
  environment variable `GDK_PIXBUF_MODULEDIR`)
- call gdk-pixbuf-query-loaders to update the module file (normally
  `$libdir/gdk-pixbuf-2.0/$version/loaders.cache`, unless overridden by the
  environment variable `GDK_PIXBUF_MODULE_FILE`)

The GdkPixBuf interfaces needed for implementing modules are contained in
`gdk-pixbuf-io.h` (and `gdk-pixbuf-animation.h` if the module supports
animations). They are not covered by the same stability guarantees as the
regular  GdkPixBuf API. To underline this fact, they are protected by
`#ifdef GDK_PIXBUF_ENABLE_BACKEND`.</doc>
    </docsection>
    <function name="pixbuf_error_quark"
              c:identifier="gdk_pixbuf_error_quark"
              moved-to="PixbufError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <docsection name="refcounting">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf.c"
           line="72">#GdkPixbuf structures are reference counted.  This means that an
application can share a single pixbuf among many parts of the
code.  When a piece of the program needs to keep a pointer to a
pixbuf, it should add a reference to it by calling g_object_ref().
When it no longer needs the pixbuf, it should subtract a reference
by calling g_object_unref().  The pixbuf will be destroyed when
its reference count drops to zero.  Newly-created #GdkPixbuf
structures start with a reference count of one.

&gt; As #GdkPixbuf is derived from #GObject now, gdk_pixbuf_ref() and
&gt; gdk_pixbuf_unref() are deprecated in favour of g_object_ref()
&gt; and g_object_unref() resp.

Finalizing a pixbuf means to free its pixel data and to free the
#GdkPixbuf structure itself.  Most of the library functions that
create #GdkPixbuf structures create the pixel data by themselves
and define the way it should be freed; you do not need to worry
about those.

To provide preallocated pixel data, use
gdk_pixbuf_new_from_bytes().  The gdk_pixbuf_new_from_data() API is
an older variant that predates the existence of #GBytes.</doc>
    </docsection>
    <docsection name="scaling">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-scale.c"
           line="28">The GdkPixBuf contains functions to scale pixbufs, to scale
pixbufs and alpha blend against an existing image, and to scale
pixbufs and alpha blend against a solid color or checkerboard.
Alpha blending a checkerboard is a common way to show an image with
an alpha channel in image-viewing and editing software.

Note that in these functions, the terms ‘alpha blending’ and ‘compositing’
are used synonymously.

Since the full-featured functions (gdk_pixbuf_scale(),
gdk_pixbuf_composite(), and gdk_pixbuf_composite_color()) are
rather complex to use and have many arguments, two simple
convenience functions are provided, gdk_pixbuf_scale_simple() and
gdk_pixbuf_composite_color_simple() which create a new pixbuf of a
given size, scale an original image to fit, and then return the
new pixbuf.

If the destination pixbuf was created from a readonly source, these
operations will force a copy into a mutable buffer.

Scaling and alpha blending functions take advantage of MMX hardware
acceleration on systems where MMX is supported.  If gdk-pixbuf is built
with the Sun mediaLib library, these functions are instead accelerated
using mediaLib, which provides hardware acceleration on Intel, AMD,
and Sparc chipsets.  If desired, mediaLib support can be turned off by
setting the `GDK_DISABLE_MEDIALIB` environment variable.

The alpha blending function used is:

|[&lt;!-- language="plain" --&gt;
Cd = Cs·As + Cd(1-As)
]|

where `Cd` is the destination pixel color, `Cs` is the source pixel color,
and `As` is the source pixel alpha.</doc>
    </docsection>
    <docsection name="util">
      <doc xml:space="preserve"
           filename="../gdk-pixbuf/gdk-pixbuf-util.c"
           line="29">These functions provide miscellaneous utilities for manipulating
pixbufs.  The pixel data in pixbufs may of course be manipulated
directly by applications, but several common operations can be
performed by these functions instead.</doc>
    </docsection>
  </namespace>
</repository>
